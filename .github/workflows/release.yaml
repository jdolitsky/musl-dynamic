on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 0 * * *'

  # Allow manually triggered workflows by maintainers without any
  # parameters to trigger a proactive rebuild (e.g. when a new
  # apko lands)
  workflow_dispatch: {}

name: Create Release

# Don't run multiple releases concurrently.
concurrency: release

jobs:
  build:
    name: Release OCI image
    runs-on: ubuntu-latest

    outputs:
      image-refs: ${{ steps.emit-refs.outputs.image-refs }}

    # https://docs.github.com/en/actions/reference/authentication-in-a-workflow
    permissions:
      id-token: write
      packages: write
      contents: read

    steps:
    - uses: actions/checkout@v3
    - id: apko
      uses: distroless/actions/apko-snapshot@main
      with:
        config: apko.yaml
        base-tag: ghcr.io/${{ github.repository }}
        image_refs: apko.images
        package-version-tag: musl

    - name: Emit Image Refs output
      id: emit-refs
      run: |
        cat apko.images | sed 's/$/\n/g' | grep -v '^$' | jq -R -s -c 'split("\n")[:-1]' | jq .
        echo ::set-output name=image-refs::$(cat apko.images | sed 's/$/\n/g' | grep -v '^$' | jq -R -s -c 'split("\n")[:-1]')

    - name: Smoke Test
      run: |
        IMAGE_NAME=$(docker load < output.tar | grep "Loaded image" | sed 's/^Loaded image: //')
        IMAGE_NAME=$IMAGE_NAME ./test.sh

    # Post to slack when things fail.
    - if: ${{ failure() }}
      uses: rtCamp/action-slack-notify@v2.2.0
      env:
        SLACK_ICON: http://github.com/chainguardian.png?size=48
        SLACK_USERNAME: chainguardian
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: distroless
        SLACK_COLOR: '#8E1600'
        MSG_MINIMAL: 'true'
        SLACK_TITLE: Releasing ${{ github.repository }} failed.
        SLACK_MESSAGE: |
          For detailed logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

  scan:
    name: Scan apko images
    needs: build
    runs-on: ubuntu-latest

    # https://docs.github.com/en/actions/reference/authentication-in-a-workflow
    permissions:
      id-token: write
      packages: write
      contents: read

    strategy:
      matrix:
        ref: ${{ fromJson(needs.build.outputs.image-refs) }}
    steps:
    - run: |
        echo ${{ matrix.ref }}
    - uses: distroless/actions/vul-scans@main
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ github.token }}
        image: ${{ matrix.ref }}
        RUN_SNYK: "false"
        RUN_GRYPE: "false"

  generate-readme:
    name: Generate README
    needs: scan
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Enable OIDC
      contents: write
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
      - name: Generate README
        uses: distroless/readme-generator@main
        with:
          repo: https://github.com/distroless/musl-dynamic
          name: musl-dynamic
          location: cgr.dev/chainguard/musl-dynamic
          description: "Base image with just enough files to run static binaries!<br/><br/>This image is meant to be used as a base image only, and is otherwise useless. It contains the `alpine-baselayout-data` package from Alpine, which is just a set of data files needed to support glibc and musl static binaries at runtime.<br/><br/>This image can be used with `ko build`, `docker`, etc, but is only suitable for running static binaries."
          exclude-tags: 20220302,20220303,20220304,20220305,20220306,20220307,20220308,20220309,20220310,20220311,20220312,20220313,20220314,20220315,20220316,20220317,20220318,20220319,20220320,20220321,20220322,20220323,20220324,20220325,20220326,20220327,20220328,20220329,20220330,20220331,20220401,20220402,20220404,20220405,20220406,20220407,20220408,20220409,20220410,20220411,20220412,20220413,20220414,20220415,20220416,20220417,20220418,20220419,20220420,20220421,20220422,20220423,20220424,20220425,20220426,20220428,20220429
          output-path: README-GENERATED.md
      - name: Push new README back to the repo
        run: |
          set -x
          if [[ "$(diff README-GENERATED.md README.md)" == "" ]]; then
            echo "No diff detected in README. Skipping."
            exit 0
          fi
          git config user.name "Automated"
          git config user.email "actions@users.noreply.github.com"
          mv README-GENERATED.md README.md
          git add README.md
          git commit -m "Regenerate README.md" || exit 0
          git push

